// Copyright (c) 2008-2012 Jim Peters, http://uazu.net
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package net.uazu.con;

/**
 * Key presses passed in KeyEvent.  Most commonly used keys:
 *
 * <p><pre>
 *   KEY                 Printable character (stored in {@link KeyEvent#key})
 *   M_KEY               Alt + non-ASCII printable character (in {@link KeyEvent#key})
 *   M_space ... M_tilde Alt + ASCII character (also in {@link KeyEvent#key})
 *   
 *   BSp,Tab,Ret,Esc     Backspace, Tab, Return, Escape
 *   M_BSp,M_Tab         Alt-Backspace, Alt-Tab
 *   M_Ret,M_Esc         Alt-Return, Alt-Escape
 *   
 *   Up,Dn,Lf,Ri         Up, Down, Left, Right
 *   Ins,Del,Hom,End     Insert, Delete, Home, End
 *   PgU,PgD             Page up, Page down
 *   F1 ... F20          Function key F1-F20
 *   
 *   C_at ... C_uscore       Ctrl + key: ^@ to ^_
 *   M_C_at ... M_C_uscore   Alt + Ctrl + key
 * </pre></p>
 * 
 * <p>There are M_ versions of all the keys in theory, but they can
 * only be generated by doing Esc before a key in practice.</p>
 */
public enum KP {
   KEY(0100),
      Tab(0000),
      Ret(0000),
      BSp(0000),
      Esc(0000),
      Hom(0000),
      Ins(0000),
      Del(0000),
      End(0000),
      PgU(0000),
      PgD(0000),
      Up(0000),
      Down(0000),
      Left(0000),
      Right(0000),
      F1(0000 + 1),
      F2(0000 + 2),
      F3(0000 + 3),
      F4(0000 + 4),
      F5(0000 + 5),
      F6(0000 + 6),
      F7(0000 + 7),
      F8(0000 + 8),
      F9(0000 + 9),
      F10(0000 + 10),
      F11(0000 + 11),
      F12(0000 + 12),
      F13(0000 + 13),
      F14(0000 + 14),
      F15(0000 + 15),
      F16(0000 + 16),
      F17(0000 + 17),
      F18(0000 + 18),
      F19(0000 + 19),
      F20(0000 + 20),
      M_KEY(0500),
      M_Tab(0400),
      M_Ret(0400),
      M_BSp(0400),
      M_Esc(0400),
      M_Hom(0400),
      M_Ins(0400),
      M_Del(0400),
      M_End(0400),
      M_PgU(0400),
      M_PgD(0400),
      M_Up(0400),
      M_Down(0400),
      M_Left(0400),
      M_Right(0400),
      M_F1(0400 + 1),
      M_F2(0400 + 2),
      M_F3(0400 + 3),
      M_F4(0400 + 4),
      M_F5(0400 + 5),
      M_F6(0400 + 6),
      M_F7(0400 + 7),
      M_F8(0400 + 8),
      M_F9(0400 + 9),
      M_F10(0400 + 10),
      M_F11(0400 + 11),
      M_F12(0400 + 12),
      M_F13(0400 + 13),
      M_F14(0400 + 14),
      M_F15(0400 + 15),
      M_F16(0400 + 16),
      M_F17(0400 + 17),
      M_F18(0400 + 18),
      M_F19(0400 + 19),
      M_F20(0400 + 20),
      C_at(0300),
      C_A(0300),
      C_B(0300),
      C_C(0300),
      C_D(0300),
      C_E(0300),
      C_F(0300),
      C_G(0300),
      C_H(0300),
      C_I(0300),
      C_J(0300),
      C_K(0300),
      C_L(0300),
      C_M(0300),
      C_N(0300),
      C_O(0300),
      C_P(0300),
      C_Q(0300),
      C_R(0300),
      C_S(0300),
      C_T(0300),
      C_U(0300),
      C_V(0300),
      C_W(0300),
      C_X(0300),
      C_Y(0300),
      C_Z(0300),
      C_lsquare(0300),
      C_bslash(0300),
      C_rsquare(0300),
      C_caret(0300),
      C_uscore(0300),
      M_C_at(0700),
      M_C_A(0700),
      M_C_B(0700),
      M_C_C(0700),
      M_C_D(0700),
      M_C_E(0700),
      M_C_F(0700),
      M_C_G(0700),
      M_C_H(0700),
      M_C_I(0700),
      M_C_J(0700),
      M_C_K(0700),
      M_C_L(0700),
      M_C_M(0700),
      M_C_N(0700),
      M_C_O(0700),
      M_C_P(0700),
      M_C_Q(0700),
      M_C_R(0700),
      M_C_S(0700),
      M_C_T(0700),
      M_C_U(0700),
      M_C_V(0700),
      M_C_W(0700),
      M_C_X(0700),
      M_C_Y(0700),
      M_C_Z(0700),
      M_C_lsquare(0700),
      M_C_bslash(0700),
      M_C_rsquare(0700),
      M_C_caret(0700),
      M_C_uscore(0700),
      M_space(0500),
      M_exclam(0500),
      M_dquote(0500),
      M_hash(0500),
      M_dollar(0500),
      M_percent(0500),
      M_amp(0500),
      M_quote(0500),
      M_lparen(0500),
      M_rparen(0500),
      M_star(0500),
      M_plus(0500),
      M_comma(0500),
      M_minus(0500),
      M_dot(0500),
      M_slash(0500),
      M_0(0500),
      M_1(0500),
      M_2(0500),
      M_3(0500),
      M_4(0500),
      M_5(0500),
      M_6(0500),
      M_7(0500),
      M_8(0500),
      M_9(0500),
      M_colon(0500),
      M_semi(0500),
      M_lt(0500),
      M_eq(0500),
      M_gt(0500),
      M_qmark(0500),
      M_at(0500),
      M_A(0500),
      M_B(0500),
      M_C(0500),
      M_D(0500),
      M_E(0500),
      M_F(0500),
      M_G(0500),
      M_H(0500),
      M_I(0500),
      M_J(0500),
      M_K(0500),
      M_L(0500),
      M_M(0500),
      M_N(0500),
      M_O(0500),
      M_P(0500),
      M_Q(0500),
      M_R(0500),
      M_S(0500),
      M_T(0500),
      M_U(0500),
      M_V(0500),
      M_W(0500),
      M_X(0500),
      M_Y(0500),
      M_Z(0500),
      M_lsquare(0500),
      M_bslash(0500),
      M_rsquare(0500),
      M_caret(0500),
      M_uscore(0500),
      M_bquote(0500),
      M_a(0500),
      M_b(0500),
      M_c(0500),
      M_d(0500),
      M_e(0500),
      M_f(0500),
      M_g(0500),
      M_h(0500),
      M_i(0500),
      M_j(0500),
      M_k(0500),
      M_l(0500),
      M_m(0500),
      M_n(0500),
      M_o(0500),
      M_p(0500),
      M_q(0500),
      M_r(0500),
      M_s(0500),
      M_t(0500),
      M_u(0500),
      M_v(0500),
      M_w(0500),
      M_x(0500),
      M_y(0500),
      M_z(0500),
      M_lcurly(0500),
      M_vbar(0500),
      M_rcurly(0500),
      M_tilde(0500);

   /**
    * Was Meta (Alt) pressed?
    */
   public final boolean meta;
   
   /**
    * Was Ctrl pressed?
    */
   public final boolean ctrl;

   /**
    * Was a function key pressed?
    */
   public final boolean func;

   /**
    * Index of function key, 1-20
    */
   public final int findex;
   
   /**
    * Does this key have a printable character associated with it?  If
    * so, it is stored in {@link KeyEvent#key}
    */
   public final boolean print;

   private KP(int flags) {
      meta = 0 != (flags & 0400);
      ctrl = 0 != (flags & 0200);
      print = 0 != (flags & 0100);
      findex = flags & 077;
      func = findex > 0;
   }

   /**
    * Control keys, 0-31
    */
   public static final KP[] ctrl_table = new KP[] {
      C_at, C_A, C_B, C_C, C_D, C_E, C_F, C_G,
      C_H, C_I, C_J, C_K, C_L, C_M, C_N, C_O,
      C_P, C_Q, C_R, C_S, C_T, C_U, C_V, C_W,
      C_X, C_Y, C_Z, C_lsquare, C_bslash, C_rsquare, C_caret, C_uscore
   };

   /**
    * Meta-control keys, 0-31
    */
   public static final KP[] meta_ctrl_table = new KP[] {
      M_C_at, M_C_A, M_C_B, M_C_C, M_C_D, M_C_E, M_C_F, M_C_G,
      M_C_H, M_C_I, M_C_J, M_C_K, M_C_L, M_C_M, M_C_N, M_C_O,
      M_C_P, M_C_Q, M_C_R, M_C_S, M_C_T, M_C_U, M_C_V, M_C_W,
      M_C_X, M_C_Y, M_C_Z, M_C_lsquare, M_C_bslash, M_C_rsquare, M_C_caret, M_C_uscore
   };

   /**
    * Meta-ASCII keys, 0-95 (for 32-127)
    */
   public static final KP[] meta_key_table = new KP[] {
      M_space, M_exclam, M_dquote, M_hash, M_dollar, M_percent, M_amp, M_quote,
      M_lparen, M_rparen, M_star, M_plus, M_comma, M_minus, M_dot, M_slash,
      M_0, M_1, M_2, M_3, M_4, M_5, M_6, M_7,
      M_8, M_9, M_colon, M_semi, M_lt, M_eq, M_gt, M_qmark,
      M_at, M_A, M_B, M_C, M_D, M_E, M_F, M_G,
      M_H, M_I, M_J, M_K, M_L, M_M, M_N, M_O,
      M_P, M_Q, M_R, M_S, M_T, M_U, M_V, M_W,
      M_X, M_Y, M_Z, M_lsquare, M_bslash, M_rsquare, M_caret, M_uscore,
      M_bquote, M_a, M_b, M_c, M_d, M_e, M_f, M_g,
      M_h, M_i, M_j, M_k, M_l, M_m, M_n, M_o,
      M_p, M_q, M_r, M_s, M_t, M_u, M_v, M_w,
      M_x, M_y, M_z, M_lcurly, M_vbar, M_rcurly, M_tilde, null
   }; 
}
